const options={};class zoom4 extends HTMLElement{constructor(){super()}static get observedAttributes(){return["option","boundary","reset-button"]}attributeChangedCallback(e,t,o){switch(e){case"option":switch("move"===o||"scale"===o?(this.createDiv(o),console.log("zoom4 init!!")):console.error('Must have a value inside zoom-element such as (option="move/scale")'),o){case"scale":this.zoom();break;case"move":this.move()}break;case"boundary":switch(o){case"inside":this.insideBoundary=!0,"inside"===this.getAttribute("boundary")&&"scale"===this.getAttribute("option")&&console.error('you can only choose either "hide" or "free" value inside the boundary attr.');break;case"hide":this.style.overflow="hidden";break;default:console.log(".move-element has no boundary")}break;case"reset-button":"has-button"===o&&this.resetButton()}}connectedCallback(){this.#e()}#e(){this.hasAttribute("option")||this.setAttribute("option",""),this.hasAttribute("boundary")||this.setAttribute("boundary","hide"),this.hasAttribute("reset-button")||this.setAttribute("reset-button","has-button"),this.#t()}#t(){console.log("mount")}disconnectedCallback(){console.log("removed")}insideBoundary=!1;createDiv(e){const t=document.createElement("div");this.appendChild(t),t.className=`${e}-element`}resetButton(){const e=document.createElement("div");let t;if(this.appendChild(e),e.className="zoom-reset",this.hasAttribute("option")){switch(this.getAttribute("option")){case"scale":t=".scale-element";break;case"move":t=".move-element"}}const o=this.querySelector(t);e.addEventListener("click",(function(){o.style.transform="scale(1)",o.style.left="0px",o.style.top="0px"}))}zoom(){const e=this.querySelector(".scale-element");e.scale=1,e.addEventListener("wheel",(function(e){e.preventDefault(),this.scale+=-.01*e.deltaY,this.scale=Math.min(Math.max(.125,this.scale),10),this.style.transform=`scale(${this.scale})`}))}move(){const e="ontouchstart"in document.documentElement?"touchstart":"mousedown",t="ontouchend"in document.documentElement?"touchend":"mouseup",o="ontouchmove"in document.documentElement?"touchmove":"mousemove",s=this.querySelector(".move-element"),n=this;let i,a,r,c,h;const l=this.querySelector(".left"),u=this.querySelector(".top");l.innerHTML=`Left ${s.offsetLeft} px`,u.innerHTML=`Top ${s.offsetTop} px`,this.addEventListener(e,(function(t){t.preventDefault(),i=!0,"touchstart"==e?(a=t.originalEvent.targetTouches[0].pageX-s.offsetLeft,r=t.originalEvent.targetTouches[0].pageY-s.offsetTop):(a=t.pageX-s.offsetLeft,r=t.pageY-s.offsetTop),this.addEventListener(o,(e=>{i&&("touchmove"==o?(c=e.originalEvent.targetTouches[0].pageX-a,h=e.originalEvent.targetTouches[0].pageY-r,this.insideBoundary&&(c>n.offsetWidth-s.offsetWidth?c=n.offsetWidth-s.offsetWidth:c<0&&(c=0),h>n.offsetHeight-s.offsetHeight?h=n.offsetHeight-s.offsetHeight:h<0&&(h=0))):(c=e.pageX-a,h=e.pageY-r,this.insideBoundary&&(c>n.offsetWidth-s.offsetWidth?c=n.offsetWidth-s.offsetWidth:c<0&&(c=0),h>n.offsetHeight-s.offsetHeight?h=n.offsetHeight-s.offsetHeight:h<0&&(h=0)))),s.style.left=`${c}px`,s.style.top=`${h}px`,l.innerHTML=`${s.style.left}`,u.innerHTML=`${s.style.top}`}))})),this.addEventListener(t,(function(){console.log("mouseup"),i=!1}))}}customElements.define("zoom-element",zoom4);
//# sourceMappingURL=zoom4-dist.js.map